/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright (c) 2011 Vinay Pulim <vinay@milewise.com>
 * MIT Licensed
 */
import * as tslib_1 from "tslib";
import * as wsdl from './wsdl';
import { security } from './security';
import { Client } from './client';
export { Client } from './client';
export { security } from './security';
export { passwordDigest } from './utils';
export const /** @type {?} */ WSDL = wsdl.WSDL;
const /** @type {?} */ cache = {}; // TODO some caching?
const /** @type {?} */ getFromCache = (url, options) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    console.log('Getting from cache', url);
    if (cache[url]) {
        console.log('Found in cache', url);
        return cache[url];
    }
    else {
        return wsdl.open_wsdl(url, options);
    }
});
const ɵ0 = getFromCache;
/**
 * @param {?} url
 * @param {?} options
 * @return {?}
 */
function _requestWSDL(url, options) {
    if (options.disableCache === true) {
        return wsdl.open_wsdl(url, options);
    }
    else {
        return getFromCache(url, options);
    }
}
/**
 * @param {?} url
 * @param {?} options
 * @param {?} endpoint
 * @return {?}
 */
export function createClient(url, options, endpoint) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (typeof options === 'undefined') {
            options = {};
        }
        console.log("createClient", options);
        endpoint = options.endpoint || endpoint;
        const /** @type {?} */ wsdl = yield _requestWSDL(url, options);
        const /** @type {?} */ client = new Client(wsdl, endpoint, options);
        return client;
    });
}
export const /** @type {?} */ BasicAuthSecurity = security.BasicAuthSecurity;
export const /** @type {?} */ NTLMSecurity = security.NTLMSecurity;
export const /** @type {?} */ WSSecurity = security.WSSecurity;
// export const WSSecurityCert = security.WSSecurityCert;
export const /** @type {?} */ BearerSecurity = security.BearerSecurity;
// export const ClientSSLSecurity = security.ClientSSLSecurity;
// export const ClientSSLSecurityPFX = security.ClientSSLSecurityPFX;
export { ɵ0 };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29hcC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zb2FwLyIsInNvdXJjZXMiOlsibGliL3NvYXAvc29hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFLQSxPQUFPLEtBQUssSUFBSSxNQUFNLFFBQVEsQ0FBQztBQUMvQixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQUUsUUFBUSxFQUFHLE1BQU0sWUFBWSxDQUFDO0FBRXZDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFDeEMsTUFBTSxDQUFDLHVCQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBRTlCLHVCQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7QUFFakIsdUJBQU0sWUFBWSxHQUFHLENBQU8sR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFO0lBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdkMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNuQjtJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0tBQ3BDO0VBQ0YsQ0FBQzs7Ozs7OztBQUVGLHNCQUFzQixHQUFHLEVBQUUsT0FBTztJQUNoQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ3JDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNuQztDQUVGOzs7Ozs7O0FBRUQsTUFBTSx1QkFBNkIsR0FBRyxFQUFFLE9BQU8sRUFBRSxRQUFROztRQUN2RCxFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ25DLE9BQU8sR0FBRyxFQUFFLENBQUM7U0FDZDtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ3BDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQztRQUV4Qyx1QkFBTSxJQUFJLEdBQUcsTUFBTSxZQUFZLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzlDLHVCQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxNQUFNLENBQUM7O0NBQ2Y7QUFFRCxNQUFNLENBQUMsdUJBQU0saUJBQWlCLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDO0FBQzVELE1BQU0sQ0FBQyx1QkFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQztBQUNsRCxNQUFNLENBQUMsdUJBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7O0FBRTlDLE1BQU0sQ0FBQyx1QkFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTEgVmluYXkgUHVsaW0gPHZpbmF5QG1pbGV3aXNlLmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbmltcG9ydCAqIGFzIHdzZGwgZnJvbSAnLi93c2RsJztcbmltcG9ydCB7IHNlY3VyaXR5IH0gZnJvbSAnLi9zZWN1cml0eSc7XG5pbXBvcnQgeyBDbGllbnQgfSBmcm9tICcuL2NsaWVudCc7XG5leHBvcnQgeyBDbGllbnQgfSBmcm9tICcuL2NsaWVudCc7XG5leHBvcnQgeyBzZWN1cml0eSAgfSBmcm9tICcuL3NlY3VyaXR5JztcblxuZXhwb3J0IHsgcGFzc3dvcmREaWdlc3QgfSBmcm9tICcuL3V0aWxzJ1xuZXhwb3J0IGNvbnN0IFdTREwgPSB3c2RsLldTREw7XG5cbmNvbnN0IGNhY2hlID0ge307IC8vIFRPRE8gc29tZSBjYWNoaW5nP1xuXG5jb25zdCBnZXRGcm9tQ2FjaGUgPSBhc3luYyAodXJsLCBvcHRpb25zKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdHZXR0aW5nIGZyb20gY2FjaGUnLCB1cmwpO1xuICBpZiAoY2FjaGVbdXJsXSkge1xuICAgIGNvbnNvbGUubG9nKCdGb3VuZCBpbiBjYWNoZScsIHVybCk7XG4gICAgcmV0dXJuIGNhY2hlW3VybF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHdzZGwub3Blbl93c2RsKHVybCwgb3B0aW9ucylcbiAgfVxufTtcblxuZnVuY3Rpb24gX3JlcXVlc3RXU0RMKHVybCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5kaXNhYmxlQ2FjaGUgPT09IHRydWUpIHtcbiAgICByZXR1cm4gd3NkbC5vcGVuX3dzZGwodXJsLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0RnJvbUNhY2hlKHVybCwgb3B0aW9ucyk7XG4gIH1cblxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQ2xpZW50KHVybCwgb3B0aW9ucywgZW5kcG9pbnQpOiBQcm9taXNlPGFueT4ge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGNvbnNvbGUubG9nKFwiY3JlYXRlQ2xpZW50XCIsIG9wdGlvbnMpXG4gIGVuZHBvaW50ID0gb3B0aW9ucy5lbmRwb2ludCB8fCBlbmRwb2ludDtcbiAgXG4gIGNvbnN0IHdzZGwgPSBhd2FpdCBfcmVxdWVzdFdTREwodXJsLCBvcHRpb25zKTtcbiAgY29uc3QgY2xpZW50ID0gbmV3IENsaWVudCh3c2RsLCBlbmRwb2ludCwgb3B0aW9ucyk7XG4gIHJldHVybiBjbGllbnQ7XG59XG5cbmV4cG9ydCBjb25zdCBCYXNpY0F1dGhTZWN1cml0eSA9IHNlY3VyaXR5LkJhc2ljQXV0aFNlY3VyaXR5O1xuZXhwb3J0IGNvbnN0IE5UTE1TZWN1cml0eSA9IHNlY3VyaXR5Lk5UTE1TZWN1cml0eTtcbmV4cG9ydCBjb25zdCBXU1NlY3VyaXR5ID0gc2VjdXJpdHkuV1NTZWN1cml0eTtcbi8vIGV4cG9ydCBjb25zdCBXU1NlY3VyaXR5Q2VydCA9IHNlY3VyaXR5LldTU2VjdXJpdHlDZXJ0O1xuZXhwb3J0IGNvbnN0IEJlYXJlclNlY3VyaXR5ID0gc2VjdXJpdHkuQmVhcmVyU2VjdXJpdHk7XG4vLyBleHBvcnQgY29uc3QgQ2xpZW50U1NMU2VjdXJpdHkgPSBzZWN1cml0eS5DbGllbnRTU0xTZWN1cml0eTtcbi8vIGV4cG9ydCBjb25zdCBDbGllbnRTU0xTZWN1cml0eVBGWCA9IHNlY3VyaXR5LkNsaWVudFNTTFNlY3VyaXR5UEZYO1xuIl19