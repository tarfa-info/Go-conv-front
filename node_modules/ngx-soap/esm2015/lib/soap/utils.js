/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import sha1 from 'crypto-js/sha1';
import Base64 from 'crypto-js/enc-base64';
import { Buffer } from 'buffer';
export const /** @type {?} */ passwordDigest = function passwordDigest(nonce, created, password) {
    const /** @type {?} */ rawNonce = new Buffer(nonce || '', 'base64').toString('binary');
    return Base64.stringify(sha1(rawNonce + created + password, ''));
};
export const /** @type {?} */ TNS_PREFIX = '__tns__';
/**
 * Find a key from an object based on the value
 * @param Namespace prefix/uri mapping
 * @param nsURI value
 * @return The matching key
 */
export const /** @type {?} */ findPrefix = function (xmlnsMapping, nsURI) {
    for (const /** @type {?} */ n in xmlnsMapping) {
        if (n === TNS_PREFIX) {
            continue;
        }
        if (xmlnsMapping[n] === nsURI) {
            return n;
        }
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc29hcC8iLCJzb3VyY2VzIjpbImxpYi9zb2FwL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLElBQUksTUFBTSxnQkFBZ0IsQ0FBQztBQUNsQyxPQUFPLE1BQU0sTUFBTSxzQkFBc0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRWhDLE1BQU0sQ0FBQyx1QkFBTSxjQUFjLEdBQUcsd0JBQXdCLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUTtJQUM1RSx1QkFBTSxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLEdBQUcsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDbEUsQ0FBQztBQUVGLE1BQU0sQ0FBQyx1QkFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDOzs7Ozs7O0FBUXBDLE1BQU0sQ0FBQyx1QkFBTSxVQUFVLEdBQUcsVUFBUyxZQUFZLEVBQUUsS0FBSztJQUNwRCxHQUFHLENBQUMsQ0FBQyx1QkFBTSxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQztRQUM3QixFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztZQUFDLFFBQVEsQ0FBQztTQUFFO1FBQ25DLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDVjtLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzaGExIGZyb20gJ2NyeXB0by1qcy9zaGExJztcbmltcG9ydCBCYXNlNjQgZnJvbSAnY3J5cHRvLWpzL2VuYy1iYXNlNjQnO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyJztcblxuZXhwb3J0IGNvbnN0IHBhc3N3b3JkRGlnZXN0ID0gZnVuY3Rpb24gcGFzc3dvcmREaWdlc3Qobm9uY2UsIGNyZWF0ZWQsIHBhc3N3b3JkKSB7XG4gIGNvbnN0IHJhd05vbmNlID0gbmV3IEJ1ZmZlcihub25jZSB8fCAnJywgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdiaW5hcnknKTtcbiAgcmV0dXJuIEJhc2U2NC5zdHJpbmdpZnkoc2hhMShyYXdOb25jZSArIGNyZWF0ZWQgKyBwYXNzd29yZCwgJycpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBUTlNfUFJFRklYID0gJ19fdG5zX18nOyAvLyBQcmVmaXggZm9yIHRhcmdldE5hbWVzcGFjZVxuXG4vKipcbiAqIEZpbmQgYSBrZXkgZnJvbSBhbiBvYmplY3QgYmFzZWQgb24gdGhlIHZhbHVlXG4gKiBAcGFyYW0gIE5hbWVzcGFjZSBwcmVmaXgvdXJpIG1hcHBpbmdcbiAqIEBwYXJhbSAgbnNVUkkgdmFsdWVcbiAqIEByZXR1cm5zICBUaGUgbWF0Y2hpbmcga2V5XG4gKi9cbmV4cG9ydCBjb25zdCBmaW5kUHJlZml4ID0gZnVuY3Rpb24oeG1sbnNNYXBwaW5nLCBuc1VSSSkge1xuICBmb3IgKGNvbnN0IG4gaW4geG1sbnNNYXBwaW5nKSB7XG4gICAgaWYgKG4gPT09IFROU19QUkVGSVgpIHsgY29udGludWU7IH1cbiAgICBpZiAoeG1sbnNNYXBwaW5nW25dID09PSBuc1VSSSkge1xuICAgICAgcmV0dXJuIG47XG4gICAgfVxuICB9XG59O1xuIl19