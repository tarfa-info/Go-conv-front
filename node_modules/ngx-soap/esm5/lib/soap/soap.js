var _this = this;
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright (c) 2011 Vinay Pulim <vinay@milewise.com>
 * MIT Licensed
 */
import * as tslib_1 from "tslib";
import * as wsdl from './wsdl';
import { security } from './security';
import { Client } from './client';
export { Client } from './client';
export { security } from './security';
export { passwordDigest } from './utils';
export var /** @type {?} */ WSDL = wsdl.WSDL;
var /** @type {?} */ cache = {}; // TODO some caching?
var /** @type {?} */ getFromCache = function (url, options) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        console.log('Getting from cache', url);
        if (cache[url]) {
            console.log('Found in cache', url);
            return [2 /*return*/, cache[url]];
        }
        else {
            return [2 /*return*/, wsdl.open_wsdl(url, options)];
        }
        return [2 /*return*/];
    });
}); };
var ɵ0 = getFromCache;
/**
 * @param {?} url
 * @param {?} options
 * @return {?}
 */
function _requestWSDL(url, options) {
    if (options.disableCache === true) {
        return wsdl.open_wsdl(url, options);
    }
    else {
        return getFromCache(url, options);
    }
}
/**
 * @param {?} url
 * @param {?} options
 * @param {?} endpoint
 * @return {?}
 */
export function createClient(url, options, endpoint) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var wsdl, client;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (typeof options === 'undefined') {
                        options = {};
                    }
                    console.log("createClient", options);
                    endpoint = options.endpoint || endpoint;
                    return [4 /*yield*/, _requestWSDL(url, options)];
                case 1:
                    wsdl = _a.sent();
                    client = new Client(wsdl, endpoint, options);
                    return [2 /*return*/, client];
            }
        });
    });
}
export var /** @type {?} */ BasicAuthSecurity = security.BasicAuthSecurity;
export var /** @type {?} */ NTLMSecurity = security.NTLMSecurity;
export var /** @type {?} */ WSSecurity = security.WSSecurity;
// export const WSSecurityCert = security.WSSecurityCert;
export var /** @type {?} */ BearerSecurity = security.BearerSecurity;
// export const ClientSSLSecurity = security.ClientSSLSecurity;
// export const ClientSSLSecurityPFX = security.ClientSSLSecurityPFX;
export { ɵ0 };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29hcC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zb2FwLyIsInNvdXJjZXMiOlsibGliL3NvYXAvc29hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxpQkFpREE7Ozs7Ozs7Ozs7QUFqREEsT0FBTyxLQUFLLElBQUksTUFBTSxRQUFRLENBQUM7QUFDL0IsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLFFBQVEsRUFBRyxNQUFNLFlBQVksQ0FBQztBQUV2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBQ3hDLE1BQU0sQ0FBQyxxQkFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUU5QixxQkFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBRWpCLHFCQUFNLFlBQVksR0FBRyxVQUFPLEdBQUcsRUFBRSxPQUFPOztRQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sZ0JBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFDO1NBQ25CO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLGdCQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUFBO1NBQ3BDOzs7S0FDRixDQUFDOzs7Ozs7O0FBRUYsc0JBQXNCLEdBQUcsRUFBRSxPQUFPO0lBQ2hDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDckM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ25DO0NBRUY7Ozs7Ozs7QUFFRCxNQUFNLHVCQUE2QixHQUFHLEVBQUUsT0FBTyxFQUFFLFFBQVE7Ozs7OztvQkFDdkQsRUFBRSxDQUFDLENBQUMsT0FBTyxPQUFPLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQzt3QkFDbkMsT0FBTyxHQUFHLEVBQUUsQ0FBQztxQkFDZDtvQkFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQTtvQkFDcEMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDO29CQUUzQixxQkFBTSxZQUFZLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUFBOztvQkFBdkMsSUFBSSxHQUFHLFNBQWdDO29CQUN2QyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztvQkFDbkQsc0JBQU8sTUFBTSxFQUFDOzs7O0NBQ2Y7QUFFRCxNQUFNLENBQUMscUJBQU0saUJBQWlCLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxxQkFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQztBQUNsRCxNQUFNLENBQUMscUJBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7O0FBRTlDLE1BQU0sQ0FBQyxxQkFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTEgVmluYXkgUHVsaW0gPHZpbmF5QG1pbGV3aXNlLmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbmltcG9ydCAqIGFzIHdzZGwgZnJvbSAnLi93c2RsJztcbmltcG9ydCB7IHNlY3VyaXR5IH0gZnJvbSAnLi9zZWN1cml0eSc7XG5pbXBvcnQgeyBDbGllbnQgfSBmcm9tICcuL2NsaWVudCc7XG5leHBvcnQgeyBDbGllbnQgfSBmcm9tICcuL2NsaWVudCc7XG5leHBvcnQgeyBzZWN1cml0eSAgfSBmcm9tICcuL3NlY3VyaXR5JztcblxuZXhwb3J0IHsgcGFzc3dvcmREaWdlc3QgfSBmcm9tICcuL3V0aWxzJ1xuZXhwb3J0IGNvbnN0IFdTREwgPSB3c2RsLldTREw7XG5cbmNvbnN0IGNhY2hlID0ge307IC8vIFRPRE8gc29tZSBjYWNoaW5nP1xuXG5jb25zdCBnZXRGcm9tQ2FjaGUgPSBhc3luYyAodXJsLCBvcHRpb25zKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdHZXR0aW5nIGZyb20gY2FjaGUnLCB1cmwpO1xuICBpZiAoY2FjaGVbdXJsXSkge1xuICAgIGNvbnNvbGUubG9nKCdGb3VuZCBpbiBjYWNoZScsIHVybCk7XG4gICAgcmV0dXJuIGNhY2hlW3VybF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHdzZGwub3Blbl93c2RsKHVybCwgb3B0aW9ucylcbiAgfVxufTtcblxuZnVuY3Rpb24gX3JlcXVlc3RXU0RMKHVybCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5kaXNhYmxlQ2FjaGUgPT09IHRydWUpIHtcbiAgICByZXR1cm4gd3NkbC5vcGVuX3dzZGwodXJsLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0RnJvbUNhY2hlKHVybCwgb3B0aW9ucyk7XG4gIH1cblxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQ2xpZW50KHVybCwgb3B0aW9ucywgZW5kcG9pbnQpOiBQcm9taXNlPGFueT4ge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGNvbnNvbGUubG9nKFwiY3JlYXRlQ2xpZW50XCIsIG9wdGlvbnMpXG4gIGVuZHBvaW50ID0gb3B0aW9ucy5lbmRwb2ludCB8fCBlbmRwb2ludDtcbiAgXG4gIGNvbnN0IHdzZGwgPSBhd2FpdCBfcmVxdWVzdFdTREwodXJsLCBvcHRpb25zKTtcbiAgY29uc3QgY2xpZW50ID0gbmV3IENsaWVudCh3c2RsLCBlbmRwb2ludCwgb3B0aW9ucyk7XG4gIHJldHVybiBjbGllbnQ7XG59XG5cbmV4cG9ydCBjb25zdCBCYXNpY0F1dGhTZWN1cml0eSA9IHNlY3VyaXR5LkJhc2ljQXV0aFNlY3VyaXR5O1xuZXhwb3J0IGNvbnN0IE5UTE1TZWN1cml0eSA9IHNlY3VyaXR5Lk5UTE1TZWN1cml0eTtcbmV4cG9ydCBjb25zdCBXU1NlY3VyaXR5ID0gc2VjdXJpdHkuV1NTZWN1cml0eTtcbi8vIGV4cG9ydCBjb25zdCBXU1NlY3VyaXR5Q2VydCA9IHNlY3VyaXR5LldTU2VjdXJpdHlDZXJ0O1xuZXhwb3J0IGNvbnN0IEJlYXJlclNlY3VyaXR5ID0gc2VjdXJpdHkuQmVhcmVyU2VjdXJpdHk7XG4vLyBleHBvcnQgY29uc3QgQ2xpZW50U1NMU2VjdXJpdHkgPSBzZWN1cml0eS5DbGllbnRTU0xTZWN1cml0eTtcbi8vIGV4cG9ydCBjb25zdCBDbGllbnRTU0xTZWN1cml0eVBGWCA9IHNlY3VyaXR5LkNsaWVudFNTTFNlY3VyaXR5UEZYO1xuIl19